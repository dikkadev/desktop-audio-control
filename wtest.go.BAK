package main

import (
	"math"

	"github.com/go-ole/go-ole"
	"github.com/moutend/go-wca/pkg/wca"
)

func main() {

	for _, id := range []string{
		"{0.0.0.00000000}.{9285d823-5344-4e5e-a6f6-c3435216944e}",
		"{0.0.0.00000000}.{21b28250-8fc2-4632-ac6a-d9c25993e1fa}",
		"{0.0.0.00000000}.{0ce8573c-d116-49b3-8619-5349caa0f6f9}",
		"{0.0.0.00000000}.{322406ce-2d81-4885-a312-d0f3f64b7db5}",
		"{0.0.0.00000000}.{90ae6596-507c-44cc-bed9-ae9534a97265}",
	} {
		vol, err := invoke(id, func(aev *wca.IAudioEndpointVolume) (interface{}, error) {
			var level float32
			err := aev.GetMasterVolumeLevelScalar(&level)
			vol := int(math.Floor(float64(level*100.0 + 0.5)))
			return vol, err
		})
		if err != nil {
			panic(err)
		}
		if vol == nil {
			panic(err)
		}
		println(vol.(int))
		println()

		// _, err = invoke(id, func(aev *wca.IAudioEndpointVolume) (interface{}, error) {
		// 	err := aev.SetMasterVolumeLevelScalar(0.5, nil)
		// 	return nil, err
		// })
		// if err != nil {
		// 	panic(err)
		// }
	}

}

func invoke(deviceID string, f func(aev *wca.IAudioEndpointVolume) (interface{}, error)) (ret interface{}, err error) {
	if err = ole.CoInitializeEx(0, ole.COINIT_APARTMENTTHREADED); err != nil {
		return
	}
	defer ole.CoUninitialize()

	var mmde *wca.IMMDeviceEnumerator
	if err = wca.CoCreateInstance(wca.CLSID_MMDeviceEnumerator, 0, wca.CLSCTX_ALL, wca.IID_IMMDeviceEnumerator, &mmde); err != nil {
		return
	}
	defer mmde.Release()

	var mmd *wca.IMMDevice
	// if err = mmde.GetDefaultAudioEndpoint(wca.ERender, wca.EConsole, &mmd); err != nil {
	// if err = mmde.GetDevice("{0.0.0.00000000}.{9285d823-5344-4e5e-a6f6-c3435216944e}", &mmd); err != nil {
	if err = mmde.GetDevice(deviceID, &mmd); err != nil {
		return
	}
	defer mmd.Release()

	var id string
	err = mmd.GetId(&id)
	if err != nil {
		return
	}
	println(id)

	var ps *wca.IPropertyStore
	if err = mmd.OpenPropertyStore(wca.STGM_READ, &ps); err != nil {
		return
	}
	defer ps.Release()

	var pv wca.PROPVARIANT
	if err = ps.GetValue(&wca.PKEY_Device_FriendlyName, &pv); err != nil {
		return
	}
	println(pv.String())

	var aev *wca.IAudioEndpointVolume
	if err = mmd.Activate(wca.IID_IAudioEndpointVolume, wca.CLSCTX_ALL, nil, &aev); err != nil {
		return
	}
	defer aev.Release()

	ret, err = f(aev)
	return
}
