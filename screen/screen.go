package screen

import (
	"desktop-audio-ctrl/multiplexer"
	"image/color"
	"machine"
	"time"

	"tinygo.org/x/drivers/sh1106"
)

const ADDR = 0x3C

var (
	Display *sh1106.Device
	bus     *machine.I2C
	mux     *multiplexer.Multiplexer

	onColor  = color.RGBA{255, 255, 255, 255}
	offColor = color.RGBA{0, 0, 0, 255}
)

func Initialize(bus_ *machine.I2C, mux_ *multiplexer.Multiplexer) {
	bus = bus_
	println("Bus var set")
	disp := sh1106.NewI2C(bus)
	Display = &disp
	Display.Configure(sh1106.Config{
		Width:    128,
		Height:   64,
		VccState: sh1106.SWITCHCAPVCC,
		Address:  ADDR,
	})
	println("Display initialized")
	mux = mux_
	println("Multiplexer var set")

	for i := uint8(0); i < 5; i++ {
		mux.Select(i)
		Display.Configure(sh1106.Config{
			Width:    128,
			Height:   64,
			VccState: sh1106.SWITCHCAPVCC,
			Address:  ADDR,
		})
		Display.ClearBuffer()
	}
	println("Screens cleared")
}

type Screen struct {
	MuxChannel uint8
}

func NewScreen(muxChannel uint8) *Screen {
	return &Screen{
		MuxChannel: muxChannel,
	}
}

var Image = []byte{
	// 'tom', 128x64px
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x90, 0xc6, 0xc8, 0x30, 0x86, 0xc8, 0x30, 0xc6, 0xc8, 0x30, 0xc6, 0xc8, 0x30,
	0xc6, 0xc8, 0xb0, 0xc6, 0xc8, 0xf0, 0xc6, 0xc8, 0xb0, 0xe6, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
	0x1c, 0x3e, 0xfe, 0xfc, 0xfc, 0xd8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x92, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa7, 0xf0, 0xe0, 0x80, 0x00, 0x80, 0xc0, 0xe0,
	0xf0, 0xf0, 0xfc, 0x7c, 0xdc, 0xfc, 0xbc, 0xec, 0xf8, 0x90, 0x40, 0xc0, 0x80, 0x00, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x01, 0x03, 0x04, 0x00, 0x01, 0x20, 0xc8, 0x7c, 0xf4, 0xfe, 0xfc, 0xfc, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x24, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x7f, 0xff, 0xff, 0x1f, 0x4f, 0x47, 0x93, 0x87,
	0x27, 0x0f, 0x8f, 0x0f, 0x1f, 0x8f, 0x23, 0x3f, 0x5c, 0xf6, 0xff, 0x7f, 0xfe, 0xbf, 0x7f, 0x7f,
	0xdf, 0xf9, 0xb8, 0xf2, 0x61, 0xc1, 0xf1, 0xd3, 0xf2, 0xf3, 0x27, 0x0c, 0x07, 0x17, 0x9c, 0x9f,
	0xf7, 0xe0, 0xf8, 0xf8, 0xe0, 0xf8, 0xf0, 0x60, 0x80, 0x81, 0x09, 0x03, 0x03, 0x07, 0x0f, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0xc4, 0xf9, 0xe2, 0x70, 0xf6, 0xb8, 0x79, 0xdf, 0xda, 0x32, 0xe4, 0xcc, 0x32,
	0x08, 0x46, 0x30, 0x8a, 0x09, 0x40, 0x08, 0x29, 0x40, 0x04, 0x30, 0x03, 0x01, 0x0d, 0x37, 0xdf,
	0x9c, 0x67, 0x4d, 0xdc, 0x1f, 0x33, 0xb3, 0x07, 0x35, 0xef, 0x23, 0x1c, 0x37, 0x07, 0x0d, 0x94,
	0x37, 0x2f, 0x7f, 0xdf, 0x1f, 0xff, 0x9f, 0x73, 0x36, 0x38, 0x80, 0x90, 0x90, 0x80, 0x10, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x6f, 0x99, 0x33, 0x0e, 0xcd, 0x13, 0x4e, 0x49, 0x83, 0xb6, 0x46, 0xcd, 0x0d,
	0x6b, 0x9a, 0x32, 0xc4, 0x10, 0x22, 0xc8, 0x40, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
	0x03, 0x23, 0x03, 0x06, 0x02, 0x0e, 0x00, 0x01, 0x04, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x06, 0x09, 0x02, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x03, 0x07, 0x07, 0x07, 0x1f, 0x01,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x92, 0x61, 0x4c, 0x93, 0x30, 0x6d, 0xfb, 0xf2, 0xfc, 0x9f, 0xff, 0xdc, 0xfb,
	0xff, 0x7c, 0x1e, 0xd1, 0x31, 0x06, 0x08, 0xc2, 0x18, 0x86, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xf0, 0xfc, 0xde, 0x3c, 0x88, 0x48, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x0c, 0x73, 0x4c, 0x8d, 0x13, 0x48, 0x8b, 0x03, 0xc3, 0xa3, 0x83, 0xc1, 0x63,
	0x62, 0x41, 0xc0, 0x30, 0x81, 0xc1, 0x20, 0x08, 0x02, 0x53, 0x90, 0x00, 0x00, 0x01, 0x30, 0x10,
	0x00, 0x00, 0x80, 0x00, 0x60, 0xc0, 0x90, 0x90, 0x64, 0xc3, 0x18, 0xc1, 0x36, 0x36, 0xde, 0xfc,
	0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0xe0, 0xf8, 0xfe, 0xff, 0xdf, 0xff, 0xff, 0xfc, 0xfc, 0xfe, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x00, 0x00, 0x01, 0x06, 0x98, 0x33, 0x44, 0x64, 0x8e, 0x99, 0x90, 0x0e, 0x48, 0x0e,
	0xb2, 0x16, 0x46, 0x06, 0x0c, 0x33, 0x86, 0x48, 0x49, 0x3c, 0x84, 0x40, 0x11, 0x20, 0xf8, 0x18,
	0x66, 0xba, 0x99, 0x73, 0xee, 0xf8, 0xf6, 0xff, 0x7f, 0xf7, 0xff, 0xbe, 0xff, 0xdb, 0xfe, 0xbe,
	0x6f, 0x7f, 0xb7, 0x3f, 0x6f, 0x3d, 0x37, 0x5e, 0x1f, 0xb7, 0x4d, 0x7f, 0xae, 0x3b, 0x3f, 0x00,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}

func (s *Screen) Activate() {
	if mux == nil {
		panic("Multiplexer not initialized")
	}
	err := mux.Select(s.MuxChannel)
	if err != nil {
		panic(err)
	}
	time.Sleep(5 * time.Millisecond)
}

func (s *Screen) Clear() {
	s.Activate()
	Display.ClearBuffer()
	Display.Display()
}

func (s *Screen) DrawImage(img []byte) {
	s.Activate()
	Display.ClearBuffer()
	Display.SetBuffer(img)
	Display.Display()
}
